name: Release CAPI, Rust crates and Python wheels

on:
  push:
    tags:
      - 'v[0-9]+*'

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  # create a release on github
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create new release
        run: |
          # remove leading 'v' in tag name
          gh release create -d v${GITHUB_REF_NAME#v}

  macos-capi:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin]
    steps:
      - uses: actions/checkout@v3
      - name: Compile library
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          cargo install cargo-c
          cd pineappl_capi
          cargo cinstall --verbose --destdir=prefix --library-type=cdylib --prefix=/ --target=${{ matrix.target }}
          cd prefix
          tar czf ../../pineappl_capi-${{ matrix.target }}.tar.gz .
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: pineappl_capi-${{ matrix.target }}
          path: pineappl_capi-${{ matrix.target }}.tar.gz

  linux-capi:
    runs-on: ubuntu-latest
    container: ghcr.io/nnpdf/pineappl-ci:latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v3
      - name: Compile library
        run: |
          cd pineappl_capi
          cargo cinstall --verbose --destdir=prefix --library-type=cdylib --prefix=/ --target=${{ matrix.target }}
          cd prefix
          tar czf ../../pineappl_capi-${{ matrix.target }}.tar.gz .
          objdump -T /usr/local/lib/libpineappl_capi.so | grep GLIBC | sed 's/.*GLIBC_\([.0-9]*\).*/\1/g' | sort -Vu | tail -1
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: pineappl_capi-${{ matrix.target }}
          path: pineappl_capi-${{ matrix.target }}.tar.gz

  # publish a release on github and upload pre-built CAPI
  publish-release:
    needs: [macos-capi, linux-capi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Create new release
        run: |
          # remove leading 'v' in tag name
          version=${GITHUB_REF_NAME#v}
          prerelease=$(echo ${version} | perl -pe 's/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/\4/')
          if [[ ${prerelease}  == "" ]]; then
              # extract the previous version number
              old_version=$(sed -n 's/^## \[\(.*\)\] - .*/\1/p' CHANGELOG.md | tail +2 | head -n 1)
              # extract news for the current version from the changelog file, dismissing
              # empty lines at the start and the end
              news=$(sed -n "/\\[${version}\\]/, /\\[${old_version}\\]/{ /\\[${old_version}\\]/! p }" \
                  CHANGELOG.md | sed -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba')
              gh release edit v${version} -n "${news}"
          else
              gh release edit v${version} -n "" --prerelease
          fi
          find artifacts -name 'pineappl_capi*' -type f -exec gh release upload v${version} {} +
          gh release edit v${version} --draft=false

  publish-crates:
    runs-on: ubuntu-latest
    container: ghcr.io/nnpdf/pineappl-ci:latest
    steps:
    - uses: actions/checkout@v3

    - name: Publish all crates
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        # this must be at least Rust 1.66 to support waiting for dependencies to on crates.io:
        # https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-166-2022-12-15
        rustup default stable
        cd pineappl
        cargo publish
        cd ../pineappl_applgrid
        cargo publish
        cd ../pineappl_fastnlo
        cargo publish
        cd ../pineappl_capi
        cargo publish
        cd ../pineappl_cli
        cargo publish

  linux-wheels:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: |
            3.7
            3.8
            3.9
            3.10
            3.11
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path pineappl_py/Cargo.toml
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows-wheels:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: |
            3.7
            3.8
            3.9
            3.10
            3.11
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path pineappl_py/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos-wheels:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [universal2-apple-darwin]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: |
            3.7
            3.8
            3.9
            3.10
            3.11
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path pineappl_py/Cargo.toml
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path pineappl_py/Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release-wheels:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux-wheels, windows-wheels, macos-wheels, sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
