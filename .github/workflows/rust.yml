name: Rust

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: '-Cinstrument-coverage'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Install LHAPDF
      uses: ./.github/actions/lhapdf

    - name: Install APPLgrid 1.6.27
      run: |
        wget --no-verbose 'http://applgrid.hepforge.org/downloads/applgrid-1.6.27.tgz'
        tar xzf applgrid-1.6.27.tgz
        cd applgrid-1.6.27
        ./configure --prefix=${HOME}/prefix --disable-static --without-root
        make -j
        make install
        echo "APPL_IGRID_DIR=$(pwd)/src" >> $GITHUB_ENV

    - name: Install fastNLO 2.5.0 rev. 2826
      run: |
        wget --no-verbose 'https://fastnlo.hepforge.org/code/v25/fastnlo_toolkit-2.5.0-2826.tar.gz'
        tar xzf fastnlo_toolkit-2.5.0-2826.tar.gz
        cd fastnlo_toolkit-2.5.0-2826
        patch -p0 < "${GITHUB_WORKSPACE}"/.github/fix_fastnlo_warnings.patch
        ./configure --prefix=${HOME}/prefix --disable-static
        make -j
        make install
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        default: true
        toolchain: 1.64.0
        components: llvm-tools-preview
    - name: Get test data
      id: cache-test-data
      uses: actions/cache@v3
      with:
        path: test-data
        key: test-data-v5
    - name: Download test data
      if: steps.cache-test-data.outputs.cache-hit != 'true'
      run: |
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/ATLASWPT11-Wplus_tot.appl'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/E906nlo_bin_00.pineappl.lz4'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/E906nlo_bin_00.tar'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/FK_ATLASTTBARTOT13TEV.dat'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/FK_POSXDQ.dat'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/LHCBWZMU7TEV_PI_part1.appl'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/LHCB_DY_8TEV.pineappl.lz4'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/LHCB_DY_8TEV.tar'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/LHCB_WP_7TEV.pineappl.lz4'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/LHCB_WP_7TEV.tar'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/NJetEvents_0-0-2.tab.gz'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/NUTEV_CC_NU_FE_SIGMARED.pineappl.lz4'
        wget --no-verbose --no-clobber -P test-data 'https://data.nnpdf.science/pineappl/test-data/NUTEV_CC_NU_FE_SIGMARED.tar'
        wget --no-verbose --no-clobber -P test-data 'https://ploughshare.web.cern.ch/ploughshare/db/applfast/applfast-atlas-dijets-fnlo-arxiv-1312.3524/grids/applfast-atlas-dijets-fnlo-arxiv-1312.3524-xsec000.tab.gz'
        wget --no-verbose --no-clobber -P test-data 'https://ploughshare.web.cern.ch/ploughshare/db/applfast/applfast-h1-dijets-appl-arxiv-0010054/grids/applfast-h1-dijets-appl-arxiv-0010054-xsec000.appl'
        wget --no-verbose --no-clobber -P test-data 'https://ploughshare.web.cern.ch/ploughshare/db/applfast/applfast-h1-incjets-fnlo-arxiv-0706.3722/grids/applfast-h1-incjets-fnlo-arxiv-0706.3722-xsec000.tab.gz'
        wget --no-verbose --no-clobber -P test-data 'https://ploughshare.web.cern.ch/ploughshare/db/atlas/atlas-atlas-wpm-arxiv-1109.5141/grids/atlas-atlas-wpm-arxiv-1109.5141-xsec001.appl'

    - name: Run tests
      run: |
        # we need stderr, but we can't run test twice because it'll regenerate/modify the binaries which interferes with `llvm-cov`
        cargo test --all-features --no-fail-fast -- --include-ignored 2> >(tee stderr 1>&2)
        # from https://stackoverflow.com/a/51141872/812178
        sed -i 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' stderr

    - name: Generate code coverage
      run: |
        find . -name '*.profraw' -exec $(rustc --print target-libdir)/../bin/llvm-profdata merge -sparse -o pineappl.profdata {} +
        sed -nE 's/  Running( unittests|) [^[:space:]]+ \(([^)]+)\)/\2/p' stderr | \
            xargs printf ' --object %s' | \
            xargs $(rustc --print target-libdir)/../bin/llvm-cov export \
                --ignore-filename-regex='/.cargo/registry' \
                --ignore-filename-regex='rustc' \
                --ignore-filename-regex='pineappl/tests' \
                --ignore-filename-regex='pineappl_capi' \
                --ignore-filename-regex='pineappl_cli/tests' \
                --instr-profile=pineappl.profdata \
                --skip-functions \
                --object target/debug/pineappl \
                --format lcov > lcov.info

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        flags: rust
